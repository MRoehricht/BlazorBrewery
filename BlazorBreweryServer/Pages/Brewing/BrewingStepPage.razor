@page "/brewingStep"
@using BlazorBrewery.Core.Common;
@using BlazorBrewery.Core.Models.Brewing;
@using BlazorBrewery.Database.Interfaces.Repositories;
@inject ISnackbar Snackbar
@inject IRecipeRepository RecipeRepository;

@if (BrewingStep != null)
{
    <MudItem Class="mx-12 my-4">
        <MudPaper Class="@classString">
            @if (!IsReadOnly)
            {
                <div class="d-flex gap-2">           
                    <MudButtonGroup Class="order-0" Color="Color.Primary" Size="Size.Small" Variant="Variant.Outlined">
                        <MudTooltip Text="nach oben">
                            <MudIconButton Icon="@Icons.Material.Filled.ArrowDropUp" Variant="Variant.Outlined" Size="Size.Small" OnClick="PositionUp"></MudIconButton>
                        </MudTooltip>
                        <MudTooltip Text="nach unten">
                            <MudIconButton Icon="@Icons.Material.Filled.ArrowDropDown" Variant="Variant.Outlined" Size="Size.Small" OnClick="PositionDown"></MudIconButton>
                        </MudTooltip>
                    </MudButtonGroup>
                    <MudTooltip Text="löschen">
                        <MudIconButton Class="order-1 d-flex flex-row-reverse" Icon="@Icons.Material.Filled.DeleteForever" Color="Color.Primary" Size="Size.Small" Variant="Variant.Outlined" OnClick="DeleteItem"></MudIconButton>
                    </MudTooltip>
                </div>
            }
        <MudForm>
            <MudGrid>
            <MudItem xs="1">
                <MudTextField T="int" ReadOnly="true" Label="Position" @bind-Value="BrewingStep.Position" />
            </MudItem>
                <MudItem xs="2">
                    <MudTextField T="string" ReadOnly="IsReadOnly" Label="Name" @bind-Value="BrewingStep.Name" RequiredError="Name erforderlich" />
                </MudItem>
                <MudItem xs="2">
                @if (BrewingStep.Typ == BrewingStepTyp.HoldTemperature)
                {
                    <MudTextField T="int" ReadOnly="IsReadOnly" Label="Dauer (Minuten)" @bind-Value="BrewingStep.DurationMinutes" RequiredError="Dauer erforderlich" />
                }
                </MudItem>
                <MudItem xs="2">
                @if (BrewingStep.Typ == BrewingStepTyp.Heat || BrewingStep.Typ == BrewingStepTyp.HoldTemperature)
                {
                    <MudTextField T="double" ReadOnly="IsReadOnly" Label="Temperatur (°C)" @bind-Value="BrewingStep.TargetTemperature" RequiredError="Temperatur erforderlich" />
                }
                </MudItem>
                <MudItem xs="2">
                        <MudSelect @bind-Value="BrewingStep.Typ" ReadOnly="IsReadOnly" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                        @foreach (BrewingStepTyp item in Enum.GetValues(typeof(BrewingStepTyp)))
                        {
                                <MudSelectItem Value="@item">@item.GetDisplayName()</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>    
                @if (_pumpintervals != null)
                {
                    <MudItem xs="2">
                            <MudSelect @bind-Value="BrewingStep.Pumpinterval" ReadOnly="IsReadOnly" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                                @foreach (var pumpinterval in _pumpintervals)
                            {
                                    <MudSelectItem Value="@pumpinterval">@pumpinterval.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                }   
                <MudItem xs="1">      
                        <MudToggleIconButton @bind-Toggled="@BrewingStep.Acknowledge"
                                         Icon="@Icons.Material.Filled.NextPlan" Color="@Color.Success" Title="Ohne Quittierung"
                                         ToggledIcon="@Icons.Material.Filled.Block" ToggledColor="@Color.Error" ToggledTitle="Mit Quittierung" />
                </MudItem>
            </MudGrid>
            </MudForm>
            @if (RunnigPosition == BrewingStep.Position)
            {
                @if (BrewingStep.Typ == BrewingStepTyp.Manually)
                {
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Striped="false" Value="@RunnigProgress" Class="my-1" />
                }
                else
                {
                    <MudProgressLinear Color="Color.Primary" Indeterminate="false" Striped="true" Value="@RunnigProgress" Class="my-1" />
                }                
            }            
        </MudPaper>
    </MudItem>
}


@code{

    [Parameter]
    public BrewingStep? BrewingStep { get; set; }

    [Parameter]
    public bool IsReadOnly { get; set; }

    [Parameter]
    public BrewingRecipe? SelectedRecipe { get; set; }

    [Parameter]
    public Action Refresh { get; set; }

    [Parameter]
    public int RunnigPosition { get; set; }  

    [Parameter]
    public int RunnigProgress { get; set; }

    public string classString => GenerateBorderClass();

    private List<Pumpinterval> _pumpintervals;

    protected override async Task OnInitializedAsync()
    {     
        _pumpintervals = await RecipeRepository.GetAllPumpintervals();
    }

    private string GenerateBorderClass()
    {
        if (SelectedRecipe == null || BrewingStep == null || RunnigPosition == 0) return "border-solid border-2 mud-border-primary pa-5";

        if (BrewingStep.Position < RunnigPosition)
        {
            return "border-solid border-2 mud-border-success pa-5";
        }


        return "border-solid border-2 mud-border-primary pa-5";
    }

    public void DeleteItem()
    {
        if (BrewingStep == null || SelectedRecipe == null || IsReadOnly) return;
        var item = SelectedRecipe.BrewingSteps.FirstOrDefault(_ => _.Id == BrewingStep.Id);
        if (item == null) return;

        var newPosition = item.Position;

        foreach (var brewingStep in SelectedRecipe.BrewingSteps.Where(_ => _.Position > newPosition).OrderBy(_ => _.Position))
        {
            brewingStep.Position--;
        }
        Snackbar.Add($"{BrewingStep.Name} wurde gelöscht", Severity.Normal);
        
        SelectedRecipe.BrewingSteps.Remove(item);
        Refresh();
    }

    public void PositionUp()
    {
        if (BrewingStep == null || SelectedRecipe == null || BrewingStep.Position == 1 || IsReadOnly) return;
        ChangePosition(BrewingStep.Position - 1);
    }

    public void PositionDown()
    {
        if (BrewingStep == null || SelectedRecipe == null || IsReadOnly) return;
        var newPosition = BrewingStep.Position + 1;
        if (SelectedRecipe.BrewingSteps.Count < newPosition) return;        
        ChangePosition(newPosition);
    }

    private void ChangePosition(int newPosition)
    {
        if (BrewingStep == null || SelectedRecipe == null || IsReadOnly) return;
        var currentPosition = BrewingStep.Position;

        var replacingItem = SelectedRecipe.BrewingSteps.FirstOrDefault(_ => _.Position == newPosition);
        if (replacingItem == null) return;

        replacingItem.Position = currentPosition;
        BrewingStep.Position = newPosition;

        Refresh();
    }
}