@page "/Brewing"
@using BlazorBrewery.BrewComputer.Interfaces.Brewing;
@using BlazorBrewery.Core.Models.Brewing;
@using BlazorBrewery.Core.Models.Processes;
@using BlazorBreweryServer.Services.Interfaces.ViewModels.Brewing;
@using BlazorBreweryServer.ViewModels.Brewing;
@using BlazorBreweryServer.ViewModels.Recipes;
@inject IBrewingViewModelService BrewingViewModelService;
@inject ISnackbar Snackbar
@inject IStepBrewService StepBrewService;
@inject IDialogService DialogService

<PageTitle>Brauen</PageTitle>

<h1>Brauen</h1>

@if (_viewModel != null)
{
    <MudSelect T="BrewingRecipe" @bind-Value="_viewModel.SelectedRecipe" ReadOnly="_isBrewingStarted" Label="Rezept" Placeholder="Bitte wählen" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" OpenIcon="@Icons.Material.Filled.LocalDrink">
        @foreach (BrewingRecipe item in _viewModel.Recipes)
        {
            <MudSelectItem Value="@item">@item.Name</MudSelectItem>
        }
    </MudSelect>
    <br/>

 @*   <MudPaper Outlined="true" Class="pa-2 ma-2 " Height="50">*@
         <MudStack Justify="Justify.Center" Row="true">
                <TemperatureComponent/>
                @*<MudPaper Outlined="true" Class="pa-3 ma-1 d-flex align-content-center flex-wrap" Width="185px">*@

                    <MudField Label="Steuerung"  Variant="Variant.Outlined">
                        <MudStack Justify="Justify.FlexStart" Row="true">
              
                        @if (_viewModel.SelectedRecipe != null)
                        {
                            @if (!_isBrewingStarted)
                            {
                                <MudTooltip Text="Schritt hinzufügen">
                                    <MudIconButton Icon="@Icons.Material.Filled.PlaylistAdd" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Large" OnClick="AddItem"></MudIconButton>
                                </MudTooltip>
                                <MudTooltip Text="Rezept speichern">
                                    <MudIconButton Icon="@Icons.Material.Filled.Save" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Large" OnClick="Save"></MudIconButton>
                                </MudTooltip>
                                <MudTooltip Text="Brauen beginnen">
                                    <MudIconButton Icon="@Icons.Material.Filled.PlayArrow" Variant="Variant.Outlined" Color="Color.Success" Size="Size.Large" OnClick="StartBrewing"></MudIconButton>
                                </MudTooltip>
                            }
                            @if (_isBrewingStarted)
                            {
                                <MudTooltip hidden Text="Vorheriger Schritt">
                                    <MudIconButton Icon="@Icons.Material.Filled.SkipPrevious" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Large" OnClick="SkipPreviousStep"></MudIconButton>
                                </MudTooltip>
                                <MudToggleIconButton hidden Toggled="@_isBrewingPaused" Variant="Variant.Outlined" ToggledChanged="OnPauseToggledChanged"
                                         Icon="@Icons.Material.Filled.Pause" ToggledColor="@Color.Info" Size="Size.Large" ToggledTitle="weiter brauen"
                                         ToggledIcon="@Icons.Material.Filled.PlayArrow" ToggledSize="Size.Large" Title="Brauen pausieren" />
                                <MudTooltip Text="Brauen stoppen">
                                    <MudIconButton Icon="@Icons.Material.Filled.Stop" Variant="Variant.Outlined" Color="Color.Error" Size="Size.Large" OnClick="StopBrewing"></MudIconButton>
                                </MudTooltip>
                                <MudTooltip Text="Nächster Schritt">
                                    <MudIconButton Icon="@Icons.Material.Filled.SkipNext" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Large" OnClick="SkipNextStep"></MudIconButton>
                                </MudTooltip>
                            }
                        }
                        </MudStack>
                    </MudField>
               @* </MudPaper>*@
           
        </MudStack>
@*    </MudPaper>*@
   

    @if (_viewModel.SelectedRecipe != null)
    {
       @* @if (!_isBrewingStarted)
        {
            <MudTooltip Text="Schritt hinzufügen">
                <MudIconButton Icon="@Icons.Material.Filled.PlaylistAdd" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Large" OnClick="AddItem"></MudIconButton>
            </MudTooltip>
            <MudTooltip Text="Rezept speichern"> 
                <MudIconButton Icon="@Icons.Material.Filled.Save" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Large" OnClick="Save"></MudIconButton>
            </MudTooltip>
            <MudTooltip Text="Brauen beginnen"> 
               <MudIconButton Icon="@Icons.Material.Filled.PlayArrow" Variant="Variant.Outlined" Color="Color.Success" Size="Size.Large" OnClick="StartBrewing"></MudIconButton>
            </MudTooltip>
        }        
        @if (_isBrewingStarted)
        {
            <MudTooltip hidden Text="Vorheriger Schritt">
                <MudIconButton Icon="@Icons.Material.Filled.SkipPrevious" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Large" OnClick="SkipPreviousStep"></MudIconButton>
            </MudTooltip>
            <MudToggleIconButton hidden Toggled="@_isBrewingPaused" Variant="Variant.Outlined" ToggledChanged="OnPauseToggledChanged" 
                     Icon="@Icons.Material.Filled.Pause" ToggledColor="@Color.Info" Size="Size.Large" ToggledTitle="weiter brauen"
                     ToggledIcon="@Icons.Material.Filled.PlayArrow" ToggledSize="Size.Large" Title="Brauen pausieren" />
            <MudTooltip Text="Brauen stoppen"> 
                <MudIconButton Icon="@Icons.Material.Filled.Stop" Variant="Variant.Outlined" Color="Color.Error" Size="Size.Large" OnClick="StopBrewing"></MudIconButton>
            </MudTooltip>
            <MudTooltip Text="Nächster Schritt">
                <MudIconButton Icon="@Icons.Material.Filled.SkipNext" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Large" OnClick="SkipNextStep"></MudIconButton>
            </MudTooltip>
        }*@

       
        @foreach (BrewingStep step in _viewModel.SelectedRecipe.BrewingSteps.OrderBy(_ => _.Position))
        {
            <BrewingStepPage BrewingStep="step" IsReadOnly="_isBrewingStarted" SelectedRecipe="_viewModel.SelectedRecipe" Refresh="Refresh" RunnigPosition="_currentBrewingStep != null ?_currentBrewingStep.Position : 0" />
        }   
    }
}




@code {
    private BrewingViewModel? _viewModel = null;
    private bool _isBrewingStarted = false;
    private bool _isBrewingPaused = false;
    private BrewingStep? _currentBrewingStep;
    private bool _acknowledgeBrewingStepIsRunning = false;

    protected override async Task OnInitializedAsync()
    {
        _viewModel = await BrewingViewModelService.GetBrewingViewModel();   
    }

    public void Refresh()
    {
        StateHasChanged();
    }

    public async Task Save()
    {
        if (_viewModel == null) return;
        await BrewingViewModelService.SaveViewModel(_viewModel);
    }

    public void AddItem()
    {
        if (_viewModel?.SelectedRecipe == null) return;

        _viewModel?.SelectedRecipe.BrewingSteps.Add(new BrewingStep { Id = Guid.NewGuid(), BrewingRecipeId = _viewModel.SelectedRecipe.Id, Position = (_viewModel.SelectedRecipe.BrewingSteps.Count + 1) });
        Refresh();
    }

    public void StartBrewing()
    {
        if (_viewModel?.SelectedRecipe == null) return;
        StepBrewService.Clear();

        _viewModel.BuildQueueBrewingSteps();
        _currentBrewingStep = _viewModel.QueueBrewingSteps.Any() ? _viewModel.QueueBrewingSteps.Dequeue() : null;
        if (_currentBrewingStep == null) return;

        if (StepBrewService.WorkIsDone == null)
            StepBrewService.WorkIsDone += StepIsDone;

        StepBrewService.Run(_currentBrewingStep, new StepProcessesUpdater());
        Snackbar.Add($"{DateTime.Now.ToLongTimeString()} Brauvorgang für {_viewModel.SelectedRecipe.Name} wurde gestartet.", Severity.Info);
        Snackbar.Add($"{DateTime.Now.ToLongTimeString()} Starte Schritt {_currentBrewingStep.Name}", Severity.Normal);
        _isBrewingStarted = true;
    }

    private void StepIsDone()
    {
        if (_viewModel?.SelectedRecipe == null) return;   
        InvokeAsync(async () =>
        {
            await BeforeStartNextStep();
        });
    }

    public void StopBrewing()
    {
        if (_viewModel?.SelectedRecipe == null) return;

        StepBrewService.Stop();

        Snackbar.Add($"{DateTime.Now.ToLongTimeString()} Brauvorgang für {_viewModel.SelectedRecipe.Name} wurde abgebrochen.", Severity.Error);
        _isBrewingStarted = false;
        _currentBrewingStep = null;
        Refresh();
    }

    private async Task BeforeStartNextStep()
    {
        if (_viewModel?.SelectedRecipe == null || _isBrewingStarted == false) return;

        if (_currentBrewingStep != null && _currentBrewingStep.Acknowledge)
        {
            var acknowledgeBrewingStep = new BrewingStep { Name = "AcknowledgeBrewingStep", Typ = BrewingStepTyp.HoldTemperature, TargetTemperature = _currentBrewingStep.TargetTemperature, Pumpinterval = _currentBrewingStep.Pumpinterval };
            StepBrewService.Run(acknowledgeBrewingStep, new StepProcessesUpdater());
            _acknowledgeBrewingStepIsRunning = true;

            var options = new DialogOptions { DisableBackdropClick = true };
            var parameters = new DialogParameters();
            parameters.Add("ContentText", "Möchtest du den Nächsten Schritt starten?");
            parameters.Add("ButtonText", "Ja");
            parameters.Add("Color", Color.Success);

            var dialog = DialogService.Show<AcknowledgeStepComponent>("Confirm", parameters, options);
            var result = await dialog.Result;

            if (!result.Cancelled)
            {
                StartNextStep();
            }
        }
        else
        {
            StartNextStep();
        }
    }

    private void StartNextStep()
    {
        if (_viewModel?.SelectedRecipe == null || _isBrewingStarted == false) return;
        if (_acknowledgeBrewingStepIsRunning)
        {
            _acknowledgeBrewingStepIsRunning = false;
            StepBrewService.Stop();
        }

        _currentBrewingStep = _viewModel.QueueBrewingSteps.Any() ? _viewModel.QueueBrewingSteps.Dequeue() : null;

        if (_currentBrewingStep == null)
        {
            Snackbar.Add($"{DateTime.Now.ToLongTimeString()} Brauvorgang für {_viewModel.SelectedRecipe.Name} wurde erfolgreich beendet.", Severity.Success);
            _isBrewingStarted = false;
            var timeString = StepBrewService.BrewTime.ToString("hh':'mm':'ss");
            DialogService.ShowMessageBox("Brauen abgeschlossen", $"Der Brauvorgang wurde erfolgreich nach {timeString} beendet.", yesText: "OK");
            Refresh();
        }
        else
        {
            StepBrewService.Run(_currentBrewingStep, new StepProcessesUpdater());
            Snackbar.Add($"{DateTime.Now.ToLongTimeString()} Starte Schritt {_currentBrewingStep.Name}", Severity.Normal);
            Refresh();
        }
    }



    public void SkipPreviousStep()
    {
        Snackbar.Add($"Ein Schritt zurück ...", Severity.Normal);
    }

    public void SkipNextStep()
    {
        StepBrewService.Stop();      
        StartNextStep();
    }

    public void OnPauseToggledChanged(bool toggled)
    {
        _isBrewingPaused = toggled;
        if (toggled)
        {
            Snackbar.Add($"Pause ...", Severity.Info);
        }
        else
        {
            Snackbar.Add($"Weiter geht´s ...", Severity.Info);
        }
        Refresh();
    }
}
