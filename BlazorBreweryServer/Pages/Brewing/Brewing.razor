@page "/Brewing"
@using BlazorBrewery.BrewComputer.Interfaces.Brewing;
@using BlazorBrewery.BrewComputer.Manager;
@using BlazorBrewery.Core.Models.Brewing;
@using BlazorBrewery.Core.Models.Processes;
@using BlazorBreweryServer.Services.Interfaces.ViewModels.Brewing;
@using BlazorBreweryServer.ViewModels.Brewing;
@using BlazorBreweryServer.ViewModels.Recipes;
@inject IBrewingViewModelService BrewingViewModelService;
@inject IBrewingManager BrewingManager;
@inject ISnackbar Snackbar
@inject IStepBrewService StepBrewService;
@inject IDialogService DialogService

@*<PageTitle>Brauen</PageTitle>*@

<h1>Brauen</h1>

@if (_viewModel != null)
{
    <MudSelect T="BrewingRecipe" @bind-Value="_viewModel.SelectedRecipe" ReadOnly="_isBrewingStarted" Label="Rezept" Placeholder="Bitte wählen" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" OpenIcon="@Icons.Material.Filled.LocalDrink">
        @foreach (BrewingRecipe item in _viewModel.Recipes)
        {
            <MudSelectItem Value="@item">@item.Name</MudSelectItem>
        }
    </MudSelect>
    <br />

    
    <MudStack Justify="Justify.Center" Row="true">
        <TemperatureComponent  TemperatureManager="StepBrewService.TemperatureManager"/>
        


        @if (_viewModel.SelectedRecipe != null && !BrewingIsLocked)
        {
            <div style="@_controllWidth">
                <MudField Label="Steuerung" Variant="Variant.Outlined">
                    <MudStack Justify="Justify.FlexStart" Row="true">
                        <MudButtonGroup OverrideStyles="false">
                            @if (!_isBrewingStarted)
                            {

                                <MudTooltip Text="Schritt hinzufügen">
                                    <MudIconButton Icon="@Icons.Material.Filled.PlaylistAdd" Variant="Variant.Outlined" Size="Size.Large" Color="Color.Primary" OnClick="AddItem"></MudIconButton>
                                </MudTooltip>
                                <MudTooltip Text="Rezept speichern">
                                    <MudIconButton Icon="@Icons.Material.Filled.Save" Variant="Variant.Outlined" Size="Size.Large" Color="Color.Primary" OnClick="Save"></MudIconButton>
                                </MudTooltip>
                                <MudTooltip Text="Brauen beginnen">
                                    <MudIconButton Icon="@Icons.Material.Filled.PlayArrow" Variant="Variant.Outlined"  Size="Size.Large" Color="Color.Success" OnClick="StartBrewing"></MudIconButton>
                                </MudTooltip>
                            }
                            @if (_isBrewingStarted)
                            {
                                @* <MudTooltip hidden Text="Vorheriger Schritt">
                    <MudIconButton Icon="@Icons.Material.Filled.SkipPrevious" Variant="Variant.Outlined" Color="Color.Primary"  OnClick="SkipPreviousStep"></MudIconButton>
                    </MudTooltip>*@
                                @*  <MudToggleIconButton hidden Toggled="@_isBrewingPaused" Variant="Variant.Outlined" ToggledChanged="OnPauseToggledChanged"
                    Icon="@Icons.Material.Filled.Pause" ToggledColor="@Color.Info" Size="Size.Large" ToggledTitle="weiter brauen"
                    ToggledIcon="@Icons.Material.Filled.PlayArrow" ToggledSize="Size.Large" Title="Brauen pausieren" />*@
                                <MudTooltip Text="Brauen stoppen">
                                    <MudIconButton Icon="@Icons.Material.Filled.Stop" Size="Size.Large" Variant="Variant.Outlined" Color="Color.Error" OnClick="StopBrewing"></MudIconButton>
                                </MudTooltip>
                                <MudTooltip Text="Nächster Schritt">
                                    <MudIconButton Icon="@Icons.Material.Filled.SkipNext" Size="Size.Large" Variant="Variant.Outlined" Color="Color.Primary" OnClick="SkipNextStep"></MudIconButton>
                                </MudTooltip>
                            }
                        </MudButtonGroup>

                    </MudStack>
                </MudField>
            </div>
        }
        @if (_currentBrewingStep != null && !BrewingIsLocked)
        {
            <MudField Label="Schritt" Variant="Variant.Outlined">
                <MudStack Justify="Justify.FlexStart" Row="true">
                    <MudIcon Class="d-flex align-start flex" Icon="@Icons.Material.Filled.Checklist" Size="Size.Large" />

                    <MudText Class="d-flex align-center" Typo="@Typo.h6">@_currentBrewingStep.Name</MudText>

                </MudStack>
            </MudField>
        }
    </MudStack>
    @*    </MudPaper>*@


    @if (_viewModel.SelectedRecipe != null)
    {
        @foreach (BrewingStep step in _viewModel.SelectedRecipe.BrewingSteps.OrderBy(_ => _.Position))
        {
            <BrewingStepPage BrewingStep="step" IsReadOnly="_isBrewingStarted" SelectedRecipe="_viewModel.SelectedRecipe" Refresh="Refresh" RunnigPosition="_currentBrewingStep != null ?_currentBrewingStep.Position : 0" RunnigProgress="runnigProgress" />
        }
    }

    @if (BrewingIsLocked)
    {
        <h4> Aktuell wird schon gebraut.</h4>
        <h6> Bitte warten Sie, bis der Brauprozess abgeschossen ist und laden dann die Seite neu.</h6>
    }
}




@code {
    private BrewingViewModel? _viewModel = null;
    private bool _isBrewingStarted = false;
    private bool _isBrewingPaused = false;
    private BrewingStep? _currentBrewingStep;
    private bool _acknowledgeBrewingStepIsRunning = false;
    private static int runnigProgress = 0;
    private Progress<int> _progress = new Progress<int>(s => runnigProgress = s);
    private string _controllWidth => _isBrewingStarted ? "width:140px" : "width:200px";
    private bool BrewingIsLocked = false;

    protected override async Task OnInitializedAsync()
    {
        _viewModel = await BrewingViewModelService.GetBrewingViewModel();
        _progress.ProgressChanged += (s, e) => Refresh();

        BrewingIsLocked = BrewingManager.CurrentBrewingRecipe != null;
        if (BrewingIsLocked)
        {
            _isBrewingStarted = true;
            BrewingManager.CurrentBrewingRecipeHasChanged += CurrentBrewingRecipeHasChanged;
        }
    }

    public void Refresh()
    {
        InvokeAsync(() => StateHasChanged());
    }

    public async Task Save()
    {
        if (_viewModel == null) return;
        await BrewingViewModelService.SaveViewModel(_viewModel);
    }

    public void AddItem()
    {
        if (_viewModel?.SelectedRecipe == null) return;

        _viewModel?.SelectedRecipe.BrewingSteps.Add(new BrewingStep { Id = Guid.NewGuid(), BrewingRecipeId = _viewModel.SelectedRecipe.Id, Position = (_viewModel.SelectedRecipe.BrewingSteps.Count + 1) });
        Refresh();
    }

    public async Task StartBrewing()
    {
        if (_viewModel?.SelectedRecipe == null) return;
        StepBrewService.Clear();
        BrewingManager.CurrentBrewingRecipe = _viewModel.SelectedRecipe;

        _viewModel.BuildQueueBrewingSteps();
        _currentBrewingStep = _viewModel.QueueBrewingSteps.Any() ? _viewModel.QueueBrewingSteps.Dequeue() : null;
        if (_currentBrewingStep == null) return;
        BrewingManager.CurrentBrewingStep = _currentBrewingStep;

        if (StepBrewService.WorkIsDone == null)
            StepBrewService.WorkIsDone += StepIsDone;

        await StepBrewService.Run(_currentBrewingStep, new StepProcessesUpdater(), _progress);
        Snackbar.Add($"{DateTime.Now.ToLongTimeString()} Brauvorgang für {_viewModel.SelectedRecipe.Name} wurde gestartet.", Severity.Info);
        Snackbar.Add($"{DateTime.Now.ToLongTimeString()} Starte Schritt {_currentBrewingStep.Name}", Severity.Normal);
        _isBrewingStarted = true;
    }

    private void StepIsDone()
    {
        if (_viewModel?.SelectedRecipe == null) return;
        InvokeAsync(async () =>
        {
            await BeforeStartNextStep();
        });
    }

    public void StopBrewing()
    {
        if (_viewModel?.SelectedRecipe == null) return;

        StepBrewService.Stop();

        Snackbar.Add($"{DateTime.Now.ToLongTimeString()} Brauvorgang für {_viewModel.SelectedRecipe.Name} wurde abgebrochen.", Severity.Error);
        _isBrewingStarted = false;
        BrewingManager.CurrentBrewingRecipe = null;
        BrewingManager.CurrentBrewingStep = null;
        _currentBrewingStep = null;
        Refresh();
    }

    private async Task BeforeStartNextStep()
    {
        if (_viewModel?.SelectedRecipe == null || _isBrewingStarted == false) return;

        if (_currentBrewingStep != null && _currentBrewingStep.Acknowledge)
        {
            var acknowledgeBrewingStep = new BrewingStep { Name = "AcknowledgeBrewingStep", Typ = BrewingStepTyp.HoldTemperature, TargetTemperature = _currentBrewingStep.TargetTemperature, Pumpinterval = _currentBrewingStep.Pumpinterval };
            await StepBrewService.Run(acknowledgeBrewingStep, new StepProcessesUpdater(), _progress);
            _acknowledgeBrewingStepIsRunning = true;

            var options = new DialogOptions { DisableBackdropClick = true };
            var parameters = new DialogParameters();
            parameters.Add("ContentText", "Möchtest du den Nächsten Schritt starten?");
            parameters.Add("ButtonText", "Ja");
            parameters.Add("Color", Color.Success);

            var dialog = DialogService.Show<AcknowledgeStepComponent>("Confirm", parameters, options);
            var result = await dialog.Result;

            if (!result.Canceled)
            {
                await StartNextStep();
            }
        }
        else
        {
            await StartNextStep();
        }
    }

    private async Task StartNextStep()
    {
        if (_viewModel?.SelectedRecipe == null || _isBrewingStarted == false) return;
        if (_acknowledgeBrewingStepIsRunning)
        {
            _acknowledgeBrewingStepIsRunning = false;
            StepBrewService.Stop();
        }

        _currentBrewingStep = _viewModel.QueueBrewingSteps.Any() ? _viewModel.QueueBrewingSteps.Dequeue() : null;

        if (_currentBrewingStep == null)
        {
            Snackbar.Add($"{DateTime.Now.ToLongTimeString()} Brauvorgang für {_viewModel.SelectedRecipe.Name} wurde erfolgreich beendet.", Severity.Success);
            _isBrewingStarted = false;
            BrewingManager.CurrentBrewingRecipe = null;
            var timeString = StepBrewService.BrewTime.ToString("hh':'mm':'ss");
            await DialogService.ShowMessageBox("Brauen abgeschlossen", $"Der Brauvorgang wurde erfolgreich nach {timeString} beendet.", yesText: "OK");
            Refresh();
        }
        else
        {
            await StepBrewService.Run(_currentBrewingStep, new StepProcessesUpdater(), _progress);
            Snackbar.Add($"{DateTime.Now.ToLongTimeString()} Starte Schritt {_currentBrewingStep.Name}", Severity.Normal);
            Refresh();
        }
    }



    public void SkipPreviousStep()
    {
        Snackbar.Add($"Ein Schritt zurück ...", Severity.Normal);
    }

    public async Task SkipNextStep()
    {
        StepBrewService.Stop();
        await StartNextStep();
    }

    public void OnPauseToggledChanged(bool toggled)
    {
        _isBrewingPaused = toggled;
        if (toggled)
        {
            Snackbar.Add($"Pause ...", Severity.Info);
        }
        else
        {
            Snackbar.Add($"Weiter geht´s ...", Severity.Info);
        }
        Refresh();
    }

    private void CurrentBrewingRecipeHasChanged()
    {
        BrewingIsLocked = BrewingManager.CurrentBrewingRecipe != null;
        if (BrewingIsLocked)
        {
            _isBrewingStarted = true;
        }
        else
        {
            _isBrewingStarted = false;
        }
        Refresh();
    }
}
