@using BlazorBrewery.BrewComputer.Manager;
@using System.Timers;
@using BlazorBrewery.Core.Models.Brewing;
@using System.Diagnostics;
@inject IRelayManager RelayManager;
@implements IDisposable;

@if (!string.IsNullOrEmpty(_currentTemperature))
{
    <MudStack Justify="Justify.FlexStart" Row="true">
        @*     <MudField  Label="Temperatur" Variant="Variant.Outlined">
    <MudTextField @bind-Value="_currentTemperature" ReadOnly="true" Variant="Variant.Text" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.DeviceThermostat" />
    </MudField>*@

        <div style="min-height:80px">
            <MudField Label="Temperatur" Variant="Variant.Outlined">
                <MudStack Justify="Justify.FlexStart" Row="true">
                    <MudIcon Icon="@Icons.Material.Filled.DeviceThermostat" Color="@_deviceThermostatColor" Size="Size.Large" />
                    <MudText Typo="@Typo.h6">@_currentTemperature</MudText>
                </MudStack>
            </MudField>
        </div>
        <MudField Label="Heizung" Variant="Variant.Outlined">
            <MudButtonGroup OverrideStyles="false">
                <MudButton Color="Color.Success" Variant="@_autoVariant" Size="Size.Large" OnClick="AutoClicked">Auto</MudButton>
                <MudButton Color="Color.Primary" Variant="@_onVariant" Size="Size.Large" OnClick="OnClicked">On</MudButton>
                <MudButton Color="Color.Primary" Variant="@_offVariant" Size="Size.Large" OnClick="OffClicked">Off</MudButton>
            </MudButtonGroup>
        </MudField>
        <PumpComponent></PumpComponent>
    </MudStack>
}

@code {
    private string? _currentTemperature;
    private Variant _autoVariant = Variant.Filled;
    private Variant _onVariant = Variant.Outlined;
    private Variant _offVariant = Variant.Outlined;
    private Color _deviceThermostatColor = Color.Info;
    private Timer _timer = new(1000);

    [Parameter]
    public ITemperatureManager? TemperatureManager { get; set; }

    protected override void OnInitialized()
    {
        _timer.Elapsed += (sender, eventArgs) => OnTimerCallback();
        _timer.Start();
    }

    protected void SetDeviceThermostatColor(double currentTemperature)
    {
        if (currentTemperature > 0 && currentTemperature < 20)
        {
            _deviceThermostatColor = Color.Info;
        }
        else if (currentTemperature >= 20 && currentTemperature < 40)
        {
            _deviceThermostatColor = Color.Warning;
        }
        else if (currentTemperature >= 40 && currentTemperature < 60)
        {
            _deviceThermostatColor = Color.Secondary;
        }
        else if (currentTemperature >= 60)
        {
            _deviceThermostatColor = Color.Error;
        }
    }

    protected void AutoClicked()
    {
        if (TemperatureManager == null) return;
        _autoVariant = Variant.Filled;
        _onVariant = Variant.Outlined;
        _offVariant = Variant.Outlined;
        RelayManager.SetPinMode(TemperatureManager.PinId, ManagerMode.Auto);

    }

    protected void OnClicked()
    {
        if (TemperatureManager == null) return;
        _autoVariant = Variant.Outlined;
        _onVariant = Variant.Filled;
        _offVariant = Variant.Outlined;
        RelayManager.SetPinMode(TemperatureManager.PinId, ManagerMode.On);
    }

    protected void OffClicked()
    {
        if (TemperatureManager == null) return;
        _autoVariant = Variant.Outlined;
        _onVariant = Variant.Outlined;
        _offVariant = Variant.Filled;
    }


    private void OnTimerCallback()
    {
        _ = InvokeAsync(async () =>
        {
            if (TemperatureManager == null) return;

            var _currentTemperatureDouble = await TemperatureManager.GetCurrentTemperature();
            _currentTemperature = _currentTemperatureDouble.ToString("N2") + " °C";
            SetDeviceThermostatColor(_currentTemperatureDouble);
            StateHasChanged();
        });
    }

    public void Dispose() => _timer.Dispose();
}