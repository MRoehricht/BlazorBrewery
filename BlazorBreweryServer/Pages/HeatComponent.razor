@using BlazorBrewery.BrewComputer.Manager;
@using BlazorBrewery.Core.Models.Brewing;
@inject IRelayManager RelayManager;
@implements IRelayManagerConsumer;
@implements IDisposable;


<MudField Label="Heizung" Variant="Variant.Outlined">
    <MudButtonGroup OverrideStyles="false">
        <MudButton Color="@_autoColor" Variant="@_autoVariant" Size="Size.Large" OnClick="AutoClicked">Auto</MudButton>
        <MudButton Color="Color.Primary" Variant="@_onVariant" Size="Size.Large" OnClick="OnClicked">On</MudButton>
        <MudButton Color="Color.Primary" Variant="@_offVariant" Size="Size.Large" OnClick="OffClicked">Off</MudButton>
    </MudButtonGroup>
</MudField>

@code {
    private Variant _autoVariant = Variant.Filled;
    private Variant _onVariant = Variant.Outlined;
    private Variant _offVariant = Variant.Outlined;
    private Color _autoColor = Color.Primary;

    [Parameter]
    public int PinId { get; set; }

    protected override void OnParametersSet()
    {
        RelayManager.Register(this);

        GenerateBorderClass(RelayManager.GetPinState(PinId));
        ModeChanged(PinId, RelayManager.GetPinMode(PinId));
    }

    protected void AutoClicked() => RelayManager.SetPinMode(PinId, ManagerMode.Auto);
    protected void OnClicked() => RelayManager.SetPinMode(PinId, ManagerMode.On);
    protected void OffClicked() => RelayManager.SetPinMode(PinId, ManagerMode.Off);

    public void StateChanged(int pinId, bool state)
    {
        if (PinId != pinId) return;
        GenerateBorderClass(state);
        InvokeAsync(() => StateHasChanged());
    }

    public void ModeChanged(int pinId, ManagerMode managerMode)
    {
        if (PinId != pinId) return;

        switch (managerMode)
        {
            case ManagerMode.On:
                _autoVariant = Variant.Outlined;
                _onVariant = Variant.Filled;
                _offVariant = Variant.Outlined;
                break;
            case ManagerMode.Off:
                _autoVariant = Variant.Outlined;
                _onVariant = Variant.Outlined;
                _offVariant = Variant.Filled;
                break;
            case ManagerMode.Auto:
                _autoVariant = Variant.Filled;
                _onVariant = Variant.Outlined;
                _offVariant = Variant.Outlined;
                break;
        }

        InvokeAsync(() => StateHasChanged());
    }

    private void GenerateBorderClass(bool isOn)
    {
        _autoColor = isOn ? Color.Success : Color.Primary;
    }

    public void Dispose() => RelayManager.UnRegister(this);
}
