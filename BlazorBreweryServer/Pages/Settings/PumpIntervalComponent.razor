@using BlazorBrewery.Core.Models.Brewing;
@using BlazorBreweryServer.Services.Interfaces.ViewModels.Settings;
@using BlazorBreweryServer.ViewModels.Settings;
@using static MudBlazor.CategoryTypes;
@inject IDialogService Dialog
@inject IPumpIntervalViewModelService ViewModelService;

<h3>PumpIntervalComponent</h3>
@if (_viewModel == null)
{
    <div style="display: flex; justify-content: center;">
        <MudProgressCircular Class="object-center" Color="Color.Default" Indeterminate="true" />
    </div>
}
else
{
    <MudFab Color="Color.Primary" Size="Size.Small" StartIcon="@Icons.Material.Filled.Add" OnClick="CreateNewRecipe" />
    <MudTable Items="@_viewModel.Pumpintervals" Hover="true" Striped="true" Bordered="true" Breakpoint="Breakpoint.Sm" OnRowClick="RowClickEvent" T="Pumpinterval">
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Laufzeit</MudTh>
            <MudTh>Pausenzeit</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Laufzeit">@context.RuntimeSeconds</MudTd>
            <MudTd DataLabel="Pausenzeit">@context.PausetimeSeconds</MudTd>
            <MudTd>
                <MudIconButton Class="object-right" Icon="@Icons.Material.Filled.Delete" aria-label="Löschen" OnClick="() => DeleteItem(context)"/>
            </MudTd>            
        </RowTemplate>
    </MudTable>
}

@code {
    private PumpIntervalViewModel _viewModel = null;

    protected override async Task OnInitializedAsync()
    {
        _viewModel = await ViewModelService.GetPumpIntervalViewModel();
    }

    private async Task CreateNewRecipe()
    {
        var emptyPumpinterval = await ViewModelService.CreateEmtyPumpInterval();
        _viewModel.Pumpintervals.Add(emptyPumpinterval);
        StateHasChanged();
    }

    private async Task RowClickEvent(TableRowClickEventArgs<Pumpinterval> tableRowClickEventArgs)
    {
        DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Large, FullWidth = true, DisableBackdropClick = true, CloseButton = false, NoHeader = true };
        DialogOptions noHeader = new DialogOptions() { NoHeader = true };
        DialogOptions fullScreen = new DialogOptions() { FullScreen = true, CloseButton = true };

        var parameters = new DialogParameters();
        parameters.Add(nameof(Pumpinterval), tableRowClickEventArgs.Item);

        var dialogName = tableRowClickEventArgs.Item?.Name ?? "Neues Rezept";

        var dialog = Dialog.Show<PumpintervalDialog>(dialogName, parameters, maxWidth);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            if (result.Data is Pumpinterval brewingRecipe)
            {

                await ViewModelService.Save(brewingRecipe);
            }
        }
        StateHasChanged();
    }

    private async Task DeleteItem(Pumpinterval pumpinterval)
    {
        await ViewModelService.DeletePumpInterval(pumpinterval);
        _viewModel.Pumpintervals.Remove(pumpinterval);
    }

}
